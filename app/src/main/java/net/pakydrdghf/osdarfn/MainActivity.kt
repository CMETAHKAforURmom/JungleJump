package net.pakydrdghf.osdarfn

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.paint
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import net.pakydrdghf.osdarfn.ui.theme.JungleJumpTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            JungleJumpTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background
                ) {
                    Box(
                        Modifier.paint(
                            painterResource(id = R.drawable.game_bg_main),
                            contentScale = ContentScale.FillBounds
                        )
                    ) {
                        Game()
                    }
                }
            }
        }
    }
}

var imagesListFrame: List<Painter> = emptyList()

@Preview
@Composable
fun Game() {

    var imagerArray = arrayOf(
        painterResource(id = R.drawable.game_ic_ground_01),
        painterResource(id = R.drawable.game_ic_ground_02),
        painterResource(id = R.drawable.game_ic_ground_03)
    )


    var newGenerated by remember {
        mutableStateOf(true)
    }

    var coins by remember {
        mutableStateOf(200)
    }

    var coeff by remember {
        mutableStateOf(2)
    }

    var bet by remember {
        mutableStateOf(25)
    }

    var bombs by remember {
        mutableStateOf(6)
    }

    var isSettings by remember {
        mutableStateOf(false)
    }

    var isBet by remember {
        mutableStateOf(false)
    }

    var isEnd by remember {
        mutableStateOf(false)
    }
    var isWin by remember {
        mutableStateOf(false)
    }
    var openAreas by remember {
        mutableStateOf(0)
    }
    var closeAll by remember {
        mutableStateOf(false)
    }
    var clearImages by remember {
        mutableStateOf(false)
    }

    if (newGenerated) {
        imagesListFrame = generateNewMap(imagerArray, bombs)
        newGenerated = false
        clearImages = true
    }

    var emptyImages = List(25) { imagerArray[2] }.toMutableList()

    emptyImages[0] = imagesListFrame[0]
    if (isEnd) {
        if (isWin) {
            coins += bombs + 25 * openAreas / (25 - bombs)
            openAreas = 0
            isWin = false
            isEnd = false
            closeAll = true
//            imagesListFrame = generateNewMap(imagerArray, bombs)
        } else if (!isWin) {
            coins -= 100
            openAreas = 0
            isWin = false
            isEnd = false
            closeAll = true
//            imagesListFrame = generateNewMap(imagerArray, bombs)
        }
    }
    Column(
        Modifier
            .fillMaxSize()
            .padding(horizontal = 5.dp),
        verticalArrangement = Arrangement.SpaceBetween
    ) {
        Spacer(modifier = Modifier.height(15.dp))
        //head area
        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
            Box(Modifier.paint(painterResource(id = R.drawable.game_bg_coins))) {
                Text(
                    text = coins.toString(),
                    Modifier
                        .align(Alignment.Center)
                        .padding(end = 30.dp)
                )
            }
            Spacer(modifier = Modifier.width(5.dp))
            Box(Modifier.paint(painterResource(id = R.drawable.game_bg_coeff))) {
                Text(text = "X" + coeff.toString(), Modifier.align(Alignment.Center))
            }
            Spacer(modifier = Modifier.width(50.dp))
            Image(painter = painterResource(id = R.drawable.game_btn_settings),
                contentDescription = "Settings",
                Modifier.clickable {
                    isSettings = true
                })
        }
        //content area
        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {
            imagesListFrame.forEachIndexed { index, element ->
                if (index % 5 == 0) {
                    Row {
                        for (i in index..index + 4) {

                            var currentImage by remember {
                                mutableStateOf(imagerArray[2])
                            }

                            var isSelect = false
                            if (clearImages) {
                                currentImage = imagerArray[2]
                                isSelect = false
                            }
                            Image(
                                painter = currentImage,
                                contentDescription = null,
                                Modifier.clickable {
                                    if (!isSelect) {
                                        isSelect = true
                                        openAreas++
                                        currentImage = imagesListFrame[i]
                                        clearImages = false
                                        closeAll = false
                                        if (imagesListFrame[i].equals(imagerArray[1]))
                                            isEnd = true
                                        if (openAreas == imagesListFrame.size - bombs) {
                                            isEnd = true
                                            isWin = true

                                        }
                                    }
                                })
                        }
                    }
                }
            }
        }
        //footer area
        Box(Modifier.fillMaxWidth()) {
            Image(
                painter = painterResource(id = R.drawable.game_btn_stop_off),
                contentDescription = "Stop", Modifier.clickable {
//                    Making a formula for result
                    isBet = false
                }
            )
            Row(Modifier.align(Alignment.TopEnd)) {
                Image(
                    painter = painterResource(id = R.drawable.game_btn_down),
                    contentDescription = "Down"
                )
                Box(
                    Modifier
                        .paint(painterResource(id = R.drawable.game_bg_coins))
                        .align(
                            Alignment.CenterVertically
                        )
                ) {
                    Text(
                        text = bet.toString(),
                        Modifier
                            .align(Alignment.Center)
                            .padding(end = 30.dp)
                    )
                }
                Image(
                    painter = painterResource(id = R.drawable.game_btn_up),
                    contentDescription = "Up"
                )
            }
            Row(
                Modifier
                    .align(Alignment.BottomStart)
                    .padding(top = 80.dp)
            ) {
                Image(
                    painter = painterResource(id = R.drawable.game_btn_down),
                    contentDescription = "Down"
                )
                Box(
                    Modifier
                        .paint(painterResource(id = R.drawable.game_btn_numbers))
                        .align(
                            Alignment.CenterVertically
                        )
                ) {
                    Text(
                        text = bombs.toString(),
                        Modifier
                            .align(Alignment.Center)
                            .padding(end = 30.dp)
                    )
                }
                Image(
                    painter = painterResource(id = R.drawable.game_btn_up),
                    contentDescription = "Up"
                )
            }
            Image(
                painter = painterResource(id = R.drawable.game_btn_bet),
                contentDescription = "Bet",
                Modifier
                    .align(
                        Alignment.BottomEnd
                    )
                    .clickable {
                        newGenerated = true
                    }
            )
        }
        Spacer(modifier = Modifier.height(5.dp))
    }
}

fun generateNewMap(Images: Array<Painter>, Bombs: Int): MutableList<Painter> {

    var generatedList: MutableList<Painter> = List(25) { Images[2] }.toMutableList()

    var bombsPos: MutableList<Int> = emptyList<Int>().toMutableList()

    for (i in 0 until Bombs) {
        var bombHelp = generatedList.indices.random()
        while (bombsPos.contains(bombHelp)) {
            bombHelp = generatedList.indices.random()
        }
        generatedList[bombHelp] = Images[1]
        bombsPos.add(bombHelp)
    }

    generatedList.forEachIndexed { index, element ->
        if (element.equals(Images[2]))
            generatedList[index] = Images[0]
    }

    return generatedList
}

@Composable
fun generateImages() {

}